// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/document.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5273870627078451261),
    name: 'Document',
    lastPropertyId: const obx_int.IdUid(9, 9018923030592915505),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8394996626699187455),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3702053412097206871),
        name: 'fileName',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 5336859569332830322),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 8023667132322702794),
        name: 'filePath',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2579987763103309886),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 1011647373439572967),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 236339848907806719),
        name: 'fileSize',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 9018923030592915505),
        name: 'fileHash',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'chunks',
        srcEntity: 'DocumentChunk',
        srcField: 'document',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1869689020035618977),
    name: 'DocumentChunk',
    lastPropertyId: const obx_int.IdUid(4, 5492377325267950209),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3901882556369035002),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1512277182732157353),
        name: 'content',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 21625958946132624),
        name: 'embeddings',
        type: 28,
        flags: 8,
        indexId: const obx_int.IdUid(3, 4581199378552730062),
        hnswParams: obx_int.ModelHnswParams(dimensions: 1024),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5492377325267950209),
        name: 'documentId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 5798898100612670106),
        relationTarget: 'Document',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 1869689020035618977),
    lastIndexId: const obx_int.IdUid(3, 4581199378552730062),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [2060455086661458674, 9025783653115450628],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Document: obx_int.EntityDefinition<Document>(
      model: _entities[0],
      toOneRelations: (Document object) => [],
      toManyRelations: (Document object) => {
        obx_int.RelInfo<DocumentChunk>.toOneBacklink(
          4,
          object.id,
          (DocumentChunk srcObject) => srcObject.document,
        ): object.chunks,
      },
      getId: (Document object) => object.id,
      setId: (Document object, int id) {
        object.id = id;
      },
      objectToFB: (Document object, fb.Builder fbb) {
        final fileNameOffset = fbb.writeString(object.fileName);
        final filePathOffset = fbb.writeString(object.filePath);
        final fileHashOffset = object.fileHash == null
            ? null
            : fbb.writeString(object.fileHash!);
        fbb.startTable(10);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, fileNameOffset);
        fbb.addOffset(2, filePathOffset);
        fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.fileSize);
        fbb.addOffset(8, fileHashOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final fileNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final filePathParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final fileSizeParam = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          18,
        );
        final fileHashParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final object = Document(
          id: idParam,
          fileName: fileNameParam,
          filePath: filePathParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
          fileSize: fileSizeParam,
          fileHash: fileHashParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<Document>(
          object.chunks,
          store,
          obx_int.RelInfo<DocumentChunk>.toOneBacklink(
            4,
            object.id,
            (DocumentChunk srcObject) => srcObject.document,
          ),
        );
        return object;
      },
    ),
    DocumentChunk: obx_int.EntityDefinition<DocumentChunk>(
      model: _entities[1],
      toOneRelations: (DocumentChunk object) => [object.document],
      toManyRelations: (DocumentChunk object) => {},
      getId: (DocumentChunk object) => object.id,
      setId: (DocumentChunk object, int id) {
        object.id = id;
      },
      objectToFB: (DocumentChunk object, fb.Builder fbb) {
        final contentOffset = fbb.writeString(object.content);
        final embeddingsOffset = fbb.writeListFloat32(object.embeddings);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, contentOffset);
        fbb.addOffset(2, embeddingsOffset);
        fbb.addInt64(3, object.document.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final contentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final embeddingsParam = const fb.ListReader<double>(
          fb.Float32Reader(),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 8, []);
        final object = DocumentChunk(
          id: idParam,
          content: contentParam,
          embeddings: embeddingsParam,
        );
        object.document.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.document.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Document] entity fields to define ObjectBox queries.
class Document_ {
  /// See [Document.id].
  static final id = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[0],
  );

  /// See [Document.fileName].
  static final fileName = obx.QueryStringProperty<Document>(
    _entities[0].properties[1],
  );

  /// See [Document.filePath].
  static final filePath = obx.QueryStringProperty<Document>(
    _entities[0].properties[2],
  );

  /// See [Document.createdAt].
  static final createdAt = obx.QueryDateProperty<Document>(
    _entities[0].properties[3],
  );

  /// See [Document.updatedAt].
  static final updatedAt = obx.QueryDateProperty<Document>(
    _entities[0].properties[4],
  );

  /// See [Document.fileSize].
  static final fileSize = obx.QueryIntegerProperty<Document>(
    _entities[0].properties[5],
  );

  /// See [Document.fileHash].
  static final fileHash = obx.QueryStringProperty<Document>(
    _entities[0].properties[6],
  );

  /// see [Document.chunks]
  static final chunks = obx.QueryBacklinkToMany<DocumentChunk, Document>(
    DocumentChunk_.document,
  );
}

/// [DocumentChunk] entity fields to define ObjectBox queries.
class DocumentChunk_ {
  /// See [DocumentChunk.id].
  static final id = obx.QueryIntegerProperty<DocumentChunk>(
    _entities[1].properties[0],
  );

  /// See [DocumentChunk.content].
  static final content = obx.QueryStringProperty<DocumentChunk>(
    _entities[1].properties[1],
  );

  /// See [DocumentChunk.embeddings].
  static final embeddings = obx.QueryHnswProperty<DocumentChunk>(
    _entities[1].properties[2],
  );

  /// See [DocumentChunk.document].
  static final document = obx.QueryRelationToOne<DocumentChunk, Document>(
    _entities[1].properties[3],
  );
}
